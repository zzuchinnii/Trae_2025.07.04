/**
 * 花卉與產品 ID 的映射關係
 * 集中管理所有花卉與對應產品的關聯
 */

// 花卉名稱與產品 ID 的映射表
export const flowerToProductMap: Record<string, string> = {
  // 熱情奔放型花卉
  '向日葵': '4', // 陽光滿溢
  '紅玫瑰': '5', // 浪漫玫瑰花束
  '橙色鬱金香': '12', // 典雅鬱金香
  '火鶴花': '11', // 繽紛混合花束
  
  // 溫柔療癒型花卉
  '薰衣草': '11', // 繽紛混合花束
  '白玫瑰': '5', // 浪漫玫瑰花束
  '滿天星': '1', // 清新小花束
  '洋甘菊': '3', // 可愛迷你花盒
  
  // 浪漫優雅型花卉
  '粉玫瑰': '5', // 浪漫玫瑰花束
  '牡丹': '6', // 永恆愛戀
  '櫻花': '14', // 季節限定花束
  '康乃馨': '2', // 溫馨康乃馨
  
  // 純真可愛型花卉
  '雛菊': '3', // 可愛迷你花盒
  '小蒼蘭': '10', // 優雅百合花束
  '風信子': '1', // 清新小花束
  '鈴蘭': '3', // 可愛迷你花盒
  
  // 神秘內斂型花卉
  '鳶尾花': '13', // 精緻蘭花組合
  '紫玫瑰': '5', // 浪漫玫瑰花束
  '紫色鬱金香': '12', // 典雅鬱金香
  '薊花': '14', // 季節限定花束
  
  // 溫暖關懷型花卉
  '黃玫瑰': '5', // 浪漫玫瑰花束
  '金盞花': '11', // 繽紛混合花束
  '萬壽菊': '2', // 溫馨康乃馨
};

/**
 * 根據花卉名稱獲取對應的產品 ID
 * @param flowerName 花卉名稱
 * @returns 產品 ID，如果找不到對應關係則返回預設產品 ID '1'
 */
export const getProductIdByFlower = (flowerName: string): string => {
  return flowerToProductMap[flowerName] || '1'; // 預設為清新小花束
};

/**
 * 檢查產品 ID 是否存在
 * 目前僅為簡單實現，實際應用中可能需要從 API 或資料庫檢查
 * @param productId 產品 ID
 * @returns 產品是否存在
 */
export const isProductExists = (productId: string): boolean => {
  // 這裡可以實現實際的產品存在性檢查邏輯
  // 目前簡單返回 true，假設所有產品都存在
  return true;
};